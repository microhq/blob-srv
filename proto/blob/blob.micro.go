// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/blob/blob.proto

package go_micro_srv_blob

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Blob service

type BlobService interface {
	CreateBucket(ctx context.Context, in *CreateBucketReq, opts ...client.CallOption) (*CreateBucketResp, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketReq, opts ...client.CallOption) (*DeleteBucketResp, error)
	Put(ctx context.Context, opts ...client.CallOption) (Blob_PutService, error)
	Get(ctx context.Context, in *GetReq, opts ...client.CallOption) (Blob_GetService, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteResp, error)
	List(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListResp, error)
}

type blobService struct {
	c    client.Client
	name string
}

func NewBlobService(name string, c client.Client) BlobService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.blob"
	}
	return &blobService{
		c:    c,
		name: name,
	}
}

func (c *blobService) CreateBucket(ctx context.Context, in *CreateBucketReq, opts ...client.CallOption) (*CreateBucketResp, error) {
	req := c.c.NewRequest(c.name, "Blob.CreateBucket", in)
	out := new(CreateBucketResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobService) DeleteBucket(ctx context.Context, in *DeleteBucketReq, opts ...client.CallOption) (*DeleteBucketResp, error) {
	req := c.c.NewRequest(c.name, "Blob.DeleteBucket", in)
	out := new(DeleteBucketResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobService) Put(ctx context.Context, opts ...client.CallOption) (Blob_PutService, error) {
	req := c.c.NewRequest(c.name, "Blob.Put", &PutReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &blobServicePut{stream}, nil
}

type Blob_PutService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PutReq) error
}

type blobServicePut struct {
	stream client.Stream
}

func (x *blobServicePut) Close() error {
	return x.stream.Close()
}

func (x *blobServicePut) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *blobServicePut) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *blobServicePut) Send(m *PutReq) error {
	return x.stream.Send(m)
}

func (c *blobService) Get(ctx context.Context, in *GetReq, opts ...client.CallOption) (Blob_GetService, error) {
	req := c.c.NewRequest(c.name, "Blob.Get", &GetReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &blobServiceGet{stream}, nil
}

type Blob_GetService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*GetResp, error)
}

type blobServiceGet struct {
	stream client.Stream
}

func (x *blobServiceGet) Close() error {
	return x.stream.Close()
}

func (x *blobServiceGet) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *blobServiceGet) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *blobServiceGet) Recv() (*GetResp, error) {
	m := new(GetResp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobService) Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteResp, error) {
	req := c.c.NewRequest(c.name, "Blob.Delete", in)
	out := new(DeleteResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobService) List(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListResp, error) {
	req := c.c.NewRequest(c.name, "Blob.List", in)
	out := new(ListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Blob service

type BlobHandler interface {
	CreateBucket(context.Context, *CreateBucketReq, *CreateBucketResp) error
	DeleteBucket(context.Context, *DeleteBucketReq, *DeleteBucketResp) error
	Put(context.Context, Blob_PutStream) error
	Get(context.Context, *GetReq, Blob_GetStream) error
	Delete(context.Context, *DeleteReq, *DeleteResp) error
	List(context.Context, *ListReq, *ListResp) error
}

func RegisterBlobHandler(s server.Server, hdlr BlobHandler, opts ...server.HandlerOption) error {
	type blob interface {
		CreateBucket(ctx context.Context, in *CreateBucketReq, out *CreateBucketResp) error
		DeleteBucket(ctx context.Context, in *DeleteBucketReq, out *DeleteBucketResp) error
		Put(ctx context.Context, stream server.Stream) error
		Get(ctx context.Context, stream server.Stream) error
		Delete(ctx context.Context, in *DeleteReq, out *DeleteResp) error
		List(ctx context.Context, in *ListReq, out *ListResp) error
	}
	type Blob struct {
		blob
	}
	h := &blobHandler{hdlr}
	return s.Handle(s.NewHandler(&Blob{h}, opts...))
}

type blobHandler struct {
	BlobHandler
}

func (h *blobHandler) CreateBucket(ctx context.Context, in *CreateBucketReq, out *CreateBucketResp) error {
	return h.BlobHandler.CreateBucket(ctx, in, out)
}

func (h *blobHandler) DeleteBucket(ctx context.Context, in *DeleteBucketReq, out *DeleteBucketResp) error {
	return h.BlobHandler.DeleteBucket(ctx, in, out)
}

func (h *blobHandler) Put(ctx context.Context, stream server.Stream) error {
	return h.BlobHandler.Put(ctx, &blobPutStream{stream})
}

type Blob_PutStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*PutReq, error)
}

type blobPutStream struct {
	stream server.Stream
}

func (x *blobPutStream) Close() error {
	return x.stream.Close()
}

func (x *blobPutStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *blobPutStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *blobPutStream) Recv() (*PutReq, error) {
	m := new(PutReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *blobHandler) Get(ctx context.Context, stream server.Stream) error {
	m := new(GetReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.BlobHandler.Get(ctx, m, &blobGetStream{stream})
}

type Blob_GetStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*GetResp) error
}

type blobGetStream struct {
	stream server.Stream
}

func (x *blobGetStream) Close() error {
	return x.stream.Close()
}

func (x *blobGetStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *blobGetStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *blobGetStream) Send(m *GetResp) error {
	return x.stream.Send(m)
}

func (h *blobHandler) Delete(ctx context.Context, in *DeleteReq, out *DeleteResp) error {
	return h.BlobHandler.Delete(ctx, in, out)
}

func (h *blobHandler) List(ctx context.Context, in *ListReq, out *ListResp) error {
	return h.BlobHandler.List(ctx, in, out)
}
